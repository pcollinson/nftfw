.\" Automatically generated by Pandoc 2.17.1.1
.\"
.\" Define V font for inline verbatim, using C font in formats
.\" that render this, and otherwise B font.
.ie "\f[CB]x\f[]"x" \{\
. ftr V B
. ftr VI BI
. ftr VB B
. ftr VBI BI
.\}
.el \{\
. ftr V CR
. ftr VI CI
. ftr VB CB
. ftr VBI CBI
.\}
.TH "NFTFW-CONFIG" "5" "" "" "Nftfw documentation"
.hy
.SH NAME
.PP
\f[B]nftfw-config\f[R] - configuration file for the nftfw system
.SH DESCRIPTION
.PP
A standard `ini' file configures the nftfw(1) system, it\[cq]s stored in
\f[I]/etc/nftfw/config.ini\f[R] or
\f[I]/usr/local/etc/nftfw/config.ini\f[R].
The file uses the standard conventions for commenting and makes use of
several sections.
Empty values can be specified by just using a keyword.
.PP
The program starts with a built-in version of the settings, then reads
the \f[I]config.ini\f[R] file.
As distributed, the installed file has all variables commented out using
semi-colons.
.PP
Values for the main \f[B]nftfw\f[R] script can be overridden by using
the \f[B]-o\f[R] option.
The \f[B]-i\f[R] option prints keys and values.
.PP
There are several sections in the file.
.PP
\f[B][Locations]\f[R]
.PP
The locations section defines the paths to files and directories used by
the system.
The program looks in \f[I]/etc\f[R] and then \f[I]/usr/local/etc\f[R]
for the \f[I]nftfw\f[R] directory determining the `root' key and that
forms the basis for all paths.
.PP
\f[I]sysetc\f[R], \f[I]sysvar\f[R] These two variables contain the
control and working files for the system:
.IP
.nf
\f[C]
  sysetc = ${root}/etc/nftfw
  sysvar = ${root}/var/lib/nftfw
\f[R]
.fi
.PP
\f[I]nftables_conf\f[R] \f[B]nftfw\f[R] needs to know where the system
writes \f[I]nftables.conf\f[R] file that provides input to
\f[I]nftables\f[R] on system reboot.
On installation, the file is written into \f[I]/etc/nftfw\f[R] for
safety.
The variable needs changing to \f[I]/etc/nftables.conf\f[R] when the
system is live.
.IP
.nf
\f[C]
  nftables_conf = ${sysetc}/etc/nftables.conf
\f[R]
.fi
.PP
\f[I]nftfw_init\f[R] The location for the initial nft setup file
containing the framework used by the firewall.
.IP
.nf
\f[C]
  nftfw_init = ${sysetc}/nftfw_init.nft
\f[R]
.fi
.PP
\f[B][Rules]\f[R]
.PP
This section provides tailoring of the default rules used in the five
processing sections of the program when rules are not explicitly given.
.IP
.nf
\f[C]
  incoming = accept
  outgoing = reject
  whitelist = accept
  blacklist = reject
  blacknets = drop
\f[R]
.fi
.PP
The key on the left is a program section name and the value is the name
of a rule.
A possible choice for `reject' is the `drop' rule which simply throws
inbound packets away.
The `reject' rule jumps to a table in the initialisation script that
actively rejects the packet.
.PP
\f[B][Logging]\f[R]
.PP
\f[I]logfmt\f[R] Set the format of log statements (see the Python
\f[I]logging\f[R] documentation for possible formats)
.IP
.nf
\f[C]
  logfmt = nftfw[%(process)d]: %(message)s
\f[R]
.fi
.PP
\f[I]loglevel\f[R] Sets the level are we logging at, this value needs to
be a level name not a value.
Choose one of CRITICAL, ERROR, WARNING, INFO, DEBUG.
\f[B]nftfw\f[R] uses the \f[B]-v\f[R] flag to the set this value to
INFO.
On installation, the log level is set to INFO and can be changed to
ERROR to reduce information written into the logs.
.IP
.nf
\f[C]
  loglevel = INFO
\f[R]
.fi
.PP
\f[I]logfacility\f[R] The logging facility are we using, it needs to be
a facility name not a value.
.IP
.nf
\f[C]
  logfacility = daemon
\f[R]
.fi
.PP
\f[I]logprint\f[R] Control printing of logged information.
Set to False to inhibit log printing at the console.
This value is initially set to False when the program is not talking to
a terminal.
\f[B]nftfw\f[R] uses the \f[B]-q\f[R] flag to the set this value to
False and the option will suppress printing to the terminal.
.IP
.nf
\f[C]
  logprint = True
\f[R]
.fi
.PP
\f[I]logsyslog\f[R] Set to False to inhibit syslog use.
.IP
.nf
\f[C]
  logsyslog = True
\f[R]
.fi
.PP
\f[B][Nft]\f[R]
.PP
This section affects the nftables statements generated by the rules.
.PP
Do we want counters on the statements?
.IP
.nf
\f[C]
  incoming_counter = True
  outgoing_counter = True
  blacklist_counter = True
  whitelist_counter = True
  blacknets_counter = True
\f[R]
.fi
.PP
Do we want nftables logging?
By adding a different prefix for each of the tables, it\[cq]s possible
to scan the syslog for events and get feedback from the firewall.
To stop logging, just use the name.
.IP
.nf
\f[C]
  incoming_logging
  outgoing_logging
  blacklist_logging = Blacklist
  whitelist_logging
  blacknets_logging
\f[R]
.fi
.PP
The three variables below control the type of sets automatically
generated for blacklist, blacknets and whitelist tables.
When true, \f[I]nftfw\f[R] uses auto_merged, interval sets for the sets
it makes.
This type automatically creates entries containing an address range for
adjacent IP addresses.
The feature is desirable because it reduces the number of matches.
.PP
However, the auto-merged, interval sets can cause the loading of
\f[I]nftables\f[R] rules to fail, flagging an error.
A load can succeed when a full install is performed but partial loads of
sets can fail.
The bug was reported to the \f[I]nftables\f[R] development team, based
on problems with the Buster release and a fix was generated.
The fix is now widely deployed.
.PP
\f[I]nftfw\f[R] works around this bug, automatically generating a full
install when an attempt at a set reload fails.
However, it seems a good idea to provide a way of turning this feature
on and default to not using the feature.
.PP
It seems likely that this problem has been fixed for the Bullseye Debian
release.
It\[cq]s recommended to enable this feature, but monitor logs to check
that updates are not failing and nftfw is managing to do installs of
sets without reporting errors.
.IP
.nf
\f[C]
  blacklist_set_auto_merge = False
  whitelist_set_auto_merge = False
  blacknets_set_auto_merge = False
\f[R]
.fi
.PP
\f[B][Whitelist]\f[R]
.PP
\f[I]wtmp_file\f[R] The \f[B]whitelist\f[R] command scans the wtmp file,
and this variable is normally empty to use the system default.
Set \f[I]wtmp_file=utmp\f[R] to use the system utmp file, otherwise set
a filename in the variable.
.IP
.nf
\f[C]
  wtmp_file
\f[R]
.fi
.PP
\f[I]whitelist_expiry\f[R] Whitelist entries in
_/etc/nftfw/whitelist.d\[ga]\[ga] are automatically expired by the
number of days in this variable.
\f[B]Nftfw\f[R] computes the delay as the difference between `now' and
the time on the file.
.IP
.nf
\f[C]
  whitelist_expiry = 10
\f[R]
.fi
.PP
\f[B][Blacklist]\f[R]
.PP
Constants to manage blacklisting depend on the number of matches found
in log files for the specific IP address - the matchcount.
The nftfwls(1) program shows the currently active blacklist and all the
information associated with each IP.
.PP
\f[I]block_after\f[R] When the matchcount goes over this level,
\f[B]nftfw\f[R] blocks the ip using the ports in the rule (Symbiosis
used 2).
.IP
.nf
\f[C]
  block_after = 10
\f[R]
.fi
.PP
\f[I]block_all_after\f[R] When the matchcount goes over this level,
\f[B]nftfw\f[R] blocks the ip using all ports.
.IP
.nf
\f[C]
  block_all_after = 100
\f[R]
.fi
.PP
\f[I]expire_after\f[R] \f[B]nftfw\f[R] removes blocked IPs from the
\f[I]blacklist.d\f[R] directory after the number of days in this value
have passed since the last incident.
Bad guys keep coming back, and sometimes re-appear several months after
expiry.
It\[cq]s useful to have feedback from the firewall to keep them in play
while they batter at the firewall door.
The system allows for this, see nftfw_files(5) for information on
patterns that support feedback.
.IP
.nf
\f[C]
  expire_after = 10
\f[R]
.fi
.PP
Symbiosis used 2 for this value.
.PP
\f[I]clean_before\f[R] \f[B]nftfw blacklist\f[R] will remove ip from the
database where there has been no error posted for more than these number
of day, the intention is to keep the database from growing to huge
proportions.
A zero value will inhibit this action.
.IP
.nf
\f[C]
 clean_before = 90
\f[R]
.fi
.PP
\f[I]sync_check\f[R] \f[B]nftfw blacklist\f[R] will check whether the IP
addresses in the database that should be active are actually present in
the blacklist directory \f[I]blacklist.d\f[R].
`Should be active' means that the addresses have not been automatically
expired.
\f[B]nftfw\f[R] is largely event driven, but events get missed.
So on the basis that if stuff can happen, it will, this code will
recover the correct state of the blacklist directory.
It seems overkill to call this every time the blacklist scanner runs, so
it is executed when number of runs of the scanner is greater than the
value of this variable.
The default is to run the blacklist scanner 96 times a day, so 50 seems
are reasonable way to run the recovery code once a day.
Set this to zero to turn this feature off.
.IP
.nf
\f[C]
 sync_check = 50
\f[R]
.fi
.PP
\f[B][Nftables]\f[R]
.PP
\f[I]nft_select\f[R] Allow selection of the method used to load/unload
nftables.
Permissable values are: \f[I]shell\f[R] using the original interface
which calls \f[I]/usr/sbin/nft\f[R], and \f[I]python\f[R] uses python
\f[I]nftables\f[R] library to load and read \f[I]nftables\f[R].
\f[I]python\f[R] is the default.
This option may go away in future, it\[cq]s there in case the python
code appears to cause problems.
.IP
.nf
\f[C]
  nft_select = python
\f[R]
.fi
.PP
\f[B][Nftfwls]\f[R]
.PP
\f[I]date_fmt\f[R] Allows change of date format for \f[I]nftfwls\f[R].
The default is DD-MM-YYYY HH:MM.
.IP
.nf
\f[C]
  date_fmt = %d-%m-%Y %H:%M
\f[R]
.fi
.PP
\f[I]pattern_split\f[R] Replaces any commas in the pattern listing
column by a newline and a space, reducing output width on the terminal
output.
Can be overridden by \f[I]-p\f[R] option to \f[I]nftfwls\f[R].
.IP
.nf
\f[C]
  pattern_split = No
\f[R]
.fi
.PP
\f[B][Nftfwedit]\f[R]
.PP
The \f[I]nftfwedit\f[R] print function can lookup the IP supplied as an
argument in various DNS blocklists.
The function is not enabled until entries are supplied in this section
of the config file.
The Python 3 package \f[I]python3_dnspython\f[R] must also be installed.
I also suggest that your system runs a caching nameserver.
.PP
Sample entries are supplied in the distributed file, and require
un-commenting by removing the initial semi-colon.
The entry is \f[I]Name=domainname\f[R], where the \f[I]domainname\f[R]
is used to access the list in the DNS lookup.
.IP
.nf
\f[C]
  ;SpamHaus=zen.spamhaus.org
  ;Barracuda=b.barracudacentral.org
  ;SpamCop=bl.spamcop.net
\f[R]
.fi
.SH Files
.PP
Files can be located in \f[I]/usr/local\f[R] rather than under_/_.
.TP
\f[I]/etc/nftfw\f[R]
Location of control files
.TP
\f[I]/var/lib/nftfw/\f[R]
Location of \f[I]build\f[R], \f[I]install\f[R], lock file and sqlite3
databases storing file positions and blacklist information
.SH BUGS
.PP
See GitHub Issues: <https://github.com/pcollinson/nftfw/issues>
.SH AUTHOR
.PP
Peter Collinson (huge credit to the ideas from Patrick Cherry\[cq]s work
for the firewall for the Symbiosis hosting system).
.SH SEE ALSO
.PP
\f[B]nft(1)\f[R], \f[B]nftfw(1)\f[R], \f[B]nftfwls(1)\f[R],
\f[B]nftfwedit(1)\f[R], \f[B]nftfwadm(1)\f[R], \f[B]nftfw-files(5)\f[R]
