.\" Automatically generated by Pandoc 2.17.1.1
.\"
.\" Define V font for inline verbatim, using C font in formats
.\" that render this, and otherwise B font.
.ie "\f[CB]x\f[]"x" \{\
. ftr V B
. ftr VI BI
. ftr VB B
. ftr VBI BI
.\}
.el \{\
. ftr V CR
. ftr VI CI
. ftr VB CB
. ftr VBI CBI
.\}
.TH "Nftfw" "1" "" "" "Nftfw documentation"
.hy
.SH NAME
.PP
\f[B]nftfw\f[R] - manage the Nftfw firewall generator
.SH SYNOPSIS
.PP
\f[B]nftfw\f[R] [\f[B]-h\f[R]] [\f[B]-c\f[R] \f[I]config\f[R]]
[\f[B]-p\f[R] \f[I]patternname\f[R]] [\f[B]-o\f[R] \f[I]option\f[R]]
[\f[B]-x | -f | -i | -a | -q | -v \f[R]]
[\f[B]\f[BI]load|blacklist|whitelist|tidy\f[B]\f[R]]
.SH DESCRIPTION
.PP
\f[B]nftfw\f[R] is the front-end for the firewall system that generates
rules for nftables.
It uses files in five directories in \f[I]/etc/nftfw\f[R] to create
firewall rules.
The directories create incoming and outgoing firewalls, and also tables
for whitelisting and blacklisting particular IP addresses.
The distribution is installed relative to the system\[cq]s root or below
\f[I]/usr/local\f[R].
.PP
The \f[B]nftfw\f[R] command has several options, and most of these
don\[cq]t change that often when the system is in operation.
Editing the ini format file \f[I]/etc/nftfw/config.ini\f[R] changes the
values of options - see nftfw-config(5).
You may make temporary variable changes to configuration values from the
command line using the \f[B]-o\f[R] option to \f[B]nftfw\f[R] (see
below).
.PP
The optional command argument to \f[B]nftfw\f[R] runs main modules of
the program.
All actions need users to have root access permission.
A lock file ensures the running of only one instance of the program,
\f[B]nftfw\f[R] queues actions if it\[cq]s busy, and runs queued actions
at the finish of the task in hand.
.PP
\f[B]nftfw\f[R] uses an initial setup file
\f[I]/etc/nftfw/nftfw_init.nft\f[R] to form the framework for the
completed ruleset.
When \f[B]nftfw\f[R] builds the firewall rules, the
\f[I]nftfw_init.nft\f[R] file is copied into the build system, and uses
include statements to pull in rules from the separate files created from
the four directories.
.PP
The system, as distributed, provides a firewall for a hosted server with
one external internet connection.
Administrators can change the \f[I]nftfw_init.nft\f[R] file to support
more complex network needs.
.PP
Actions are:
.PP
\f[B]load\f[R]
.PP
The \f[B]load\f[R] command builds the firewall files by taking input
from files in directories in \f[I]/etc/nftfw\f[R]:
.IP \[bu] 2
\f[I]incoming.d\f[R] contains rules controlling access to services on
the system;
.IP \[bu] 2
\f[I]outbound.d\f[R] sets any rules controlling packets leaving the
system;
.IP \[bu] 2
\f[I]whitelist.d\f[R] contains files named for the IP addresses that are
to have full access to the system;
.IP \[bu] 2
\f[I]blacknets.d\f[R] contains files holding IP network addresses
allowing bulk blocking for countries; and
.IP \[bu] 2
\f[I]blacklist.d\f[R] contains files named for IP addresses in the
inbound packets that should not have access
.PP
nftfw-files(5) describes the contents and formats of files in these
directories.
.PP
\f[B]nftfw load\f[R] performs these steps, creating files in directories
in \f[I]/var/lib/nftfw\f[R]:
.IP "1." 3
The command builds a firewall ruleset in several files in
\f[I]build.d\f[R], and copies \f[I]nftfw_init.nft\f[R] into the
directory creating the initial framework.
Rules generated from \f[I]incoming.d\f[R] and \f[I]outgoing.d\f[R]
support the basic system services.
Rules formed from the \f[I]whitelist.d\f[R].
\f[I]blacklist.d\f[R] and \f[I]blacknets.d\f[R] directories make use of
nftables sets.
These sources change more often than the other directories, and the use
of sets allows \f[B]nftfw\f[R] to change parts of the installed ruleset
without completely reloading the firewall.
.IP "2." 3
\f[B]nftfw\f[R] now runs the \f[B]nft -c\f[R] command validating the
rules.
Errors cause \f[B]nftfw\f[R] to abandon any further processing.
.IP "3." 3
If all is well, \f[B]nftfw\f[R] compares the files with those in
\f[I]install.d\f[R] retained from the last run of the program.
File comparison allows \f[B]nftfw\f[R] to decide on doing nothing,
making a full update, or just updating the blacklist and/or whitelist
sets.
.IP "4." 3
\f[B]nftfw\f[R] copies all the files into the \f[I]install.d\f[R]
directory and loads these rules into the system\[cq]s kernel depending
on the decision above.
.IP "5." 3
Finally \f[B]nftfw\f[R] captures the kernel settings and stores them in
\f[I]/etc/nftables.conf\f[R], which is where the Debian system expects
to find the rules on system start-up.
.PP
The steps from (4) above could result in a broken system if parts of the
installation fails.
\f[B]nftfw\f[R] avoids the possible disaster by storing a backup copy of
the kernel\[cq]s rules before attempting any update.
On failure, \f[B]nftfw\f[R] reverts to the backup rules.
.PP
\f[B]whitelist\f[R]
.PP
The \f[B]whitelist\f[R] action is a scanner for the system\[cq]s wtmp(5)
or utmp(5) file.
The system records user logins in this file along with the IP address
used to access the system.
\f[B]nftfw\f[R] creates a file named for the IP address in
\f[I]/etc/nftfw/whitelist.d\f[R] as long as the IP address is global.
.PP
The \f[B]whitelist\f[R] command expires addresses that were
automatically created (identified by the suffix \f[I].auto\f[R]) after a
set number of days given in \f[B]nftfw\f[R]\[cq]s config file.
.PP
If the scanner makes any changes, \f[B]whitelist\f[R] invokes the
\f[B]load\f[R] command automatically installing the changes in the
firewall.
.PP
See nftfw-files(5) for information on the file formats used for
whitelist control files.
.PP
\f[B]blacklist\f[R]
.PP
The \f[B]blacklist\f[R] command is a file scanner creating IP address
files in \f[I]/etc/nftfw/blacklist.d\f[R].
The scanner reads pattern files from \f[I]/etc/nftfw/patterns.d\f[R].
Pattern files contain a file name (or a range of files given by shell
\f[I]glob\f[R] rules), the relevant ports for blocking and a set of
regular expressions matching offending lines in the nominated log files.
.PP
When \f[B]nftfw\f[R] finds a match, it updates a sqlite3(1) database
with the information and uses the frequency of matches (given in the
config file) to decide whether to blacklist the IP.
.PP
When scanning log files, the blacklist engine remembers the position in
the file at the end of the last scan, so only examines new entries on
every pass.
The \f[B]blacklist\f[R] command also expires blacklisted IPs after a set
number of days.
See nftfw-files(5) for information on the file formats used for
blacklist control files.
.PP
If the scanner makes any changes, \f[B]blacklist\f[R] invokes the
\f[B]load\f[R] command automatically installing the changes in the
firewall.
.PP
\f[B]tidy\f[R]
.PP
The \f[B]tidy\f[R] command removes old entries from the blacklist
database stopping it from growing to immense proportions.
There are two possible tests.
First, \f[B]tidy\f[R] will check and remove IPs that have been idle for
some number of days, but who have been logged a small number of times.
Second, \f[B]tidy\f[R] removes IPs that haven\[cq]t appeared for a set
number of days, this eliminates sites that may have been busy but which
haven\[cq]t returned for the period which is usally quite long, around
90 days is recommended.
The configuration file (see nftfw-config(5)) supplies the settings for
this feature.
.PP
\f[B]Options\f[R]
.PP
These are the available options to the program:
.TP
\f[B]-h\f[R], \f[B]--help\f[R]
Prints brief usage information.
.TP
\f[B]-f\f[R], \f[B]--full\f[R]
Does a full install, ignores the file compare installation step.
.TP
\f[B]-x\f[R], \f[B]--no-exec\f[R]
Create rules in _/var/lib/nftfw/test.d and tests them.
When used with the \f[B]blacklist\f[R] command, prints the result of
scanning for matches without saving any information and without updating
stored log file positions.
.TP
\f[B]-C\f[R], \f[B]--config\f[R] CONFIG
Supply a alternate configuration file, overriding any values from the
default system settings.
.TP
\f[B]-p\f[R],\f[B]--pattern\f[R]
The argument only applies to the \f[B]blacklist\f[R] command, and runs
the command using only one pattern file (the name of the file omitting
the suffix .pattern).
When combined with \f[B]-x\f[R] and setting \f[I]ports=test\f[R] in the
pattern file the option can be used to test regular expressions in
pattern files.
.TP
\f[B]-i\f[R], \f[B]--info\f[R]
List all the configuration names and settings
.TP
\f[B]-a\f[R], \f[B]--altered\f[R]
List all the configuration names and settings that are different from
those compiled into the program.
Useful to telling what configuration options have been changed in
\f[I]config.ini\f[R].
.TP
\f[B]-o\f[R], \f[B]--option\f[R] OPTION
OPTION is keyword=value and may be comma separated list of configuration
options.
The values override any settings in the configuration file.
.TP
\f[B]-q\f[R], \f[B]--quiet\f[R]
Suppress printing of errors and information messages to the terminal,
syslog output remains active.
Terminal output is suppressed when the output is not directed to a
terminal
.TP
\f[B]-v\f[R], \f[B]--verbose\f[R]
Change the default logging settings to INFO to show all errors and
information messages.
.SH FILES
.PP
Files can be located under \f[I]/\f[R] or \f[I]/usr/local\f[R].
.TP
\f[I]/etc/nftfw\f[R]
Location of control files and directories
.TP
\f[I]/etc/nftfw/nftfw_init.nft\f[R]
\f[B]nftables\f[R] basic framework
.TP
\f[I]/etc/nftfw/config.ini\f[R]
ini file with basic settings for \f[I]nftfw\f[R], overriding built-in
values
.TP
\f[I]/var/lib/nftfw/\f[R]
Location of \f[I]build.d\f[R], \f[I]test.d\f[R], \f[I]install.d\f[R],
lock files and the sqlite3 databases storing file positions and
blacklist information
.SH BUGS
.PP
See GitHub Issues: <https://github.com/pcollinson/nftfw/issues>
.SH AUTHOR
.PP
Peter Collinson (huge credit to the ideas from Patrick Cherry\[cq]s work
for the firewall for the Symbiosis hosting system).
.SH SEE ALSO
.PP
\f[B]nft(1)\f[R], \f[B]nftfwls(1)\f[R], \f[B]nftfwedit(1)\f[R],
\f[B]nftfwadm(1)\f[R], \f[B]nftfw-config(5)\f[R],
\f[B]nftfw-files(5)\f[R]
