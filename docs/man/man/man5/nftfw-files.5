.\" Automatically generated by Pandoc 2.17.1.1
.\"
.\" Define V font for inline verbatim, using C font in formats
.\" that render this, and otherwise B font.
.ie "\f[CB]x\f[]"x" \{\
. ftr V B
. ftr VI BI
. ftr VB B
. ftr VBI BI
.\}
.el \{\
. ftr V CR
. ftr VI CI
. ftr VB CB
. ftr VBI CBI
.\}
.TH "NFTFW-FILES" "5" "" "" "Nftfw documentation"
.hy
.SH NAME
.PP
\f[B]nftfw-files\f[R] - documentation of file formats used in nftfw
.SH DESCRIPTION
.PP
This page documents the file formats used in the \f[B]nftfw\f[R]
firewall system.
The system stores various control files in \f[I]/etc/nftfw\f[R] or
\f[I]/usr/local/etc/nftfw\f[R] depending on the installation.
.PP
The \f[I]etc/nftfw\f[R] directory contains:
.IP \[bu] 2
\f[I]config.ini\f[R] - configuration file supplying most `constants' for
the code, see nftfw_config(5).
.IP \[bu] 2
\f[I]nftfw_init.nft\f[R] - template file holding the basic nftables
framework for \f[B]nftfw\f[R].
.IP \[bu] 2
\f[I]incoming.d\f[R] - contains rules controlling access to services on
the system;
.IP \[bu] 2
\f[I]outbound.d\f[R] - sets any rules controlling packets leaving the
system;
.IP \[bu] 2
\f[I]whitelist.d\f[R] - contains IP addresses that have full access to
the system;
.IP \[bu] 2
\f[I]blacklist.d\f[R] - specifies IP addresses and ports in the inbound
packets that should not have access;
.IP \[bu] 2
\f[I]blacknets.d\f[R] - contains lists of network address ranges
allowing bulk blocking;
.IP \[bu] 2
\f[I]patterns.d\f[R] - contain pattern files for matching lines in log
files for blacklist; and
.IP \[bu] 2
\f[I]rule.d\f[R] - hold files for generating \f[B]nft\f[R] commands from
rule names.
.IP \[bu] 2
\f[I]local.d\f[R] - locally installed or modified rules should be placed
here to allow for distributions to update rules
.PP
The distributed files can be found in \f[I]etc/nftfw/etc_nftfw\f[R].
.SS incoming and outbound
.PP
Files in these directories specify rules for the firewall.
File names have the format:
.RS
.PP
number-description
.RE
.PP
where `number' is a pair of digits used as a sequence number and
`description' specifies the action name needed to created the nftables
commands for the rule.
.PP
Descriptions can be:
.IP \[bu] 2
a port number inserted into the firewall rule
.IP \[bu] 2
the name of a service found in \f[I]/etc/services\f[R].
.IP \[bu] 2
the name of a rule found in the rules directories (with the .sh suffix
removed)
.PP
When port numbers appear in the filename, the directory name dictates
the action file applied for the rule.
The \f[I]config.ini\f[R] file contains variables that select the default
rule based on the directory name (see nftfw-config(1)).
.PP
To allow rules to have the same name as services and replace the default
action, \f[B]nftfw\f[R] searches the local.d and then the rule.d
directories for name matches before querying the service file.
.PP
Files are usually empty, but can contain a list of IP addresses (one per
line) that \f[B]nftfw\f[R] uses to specify the source IP or IPs for an
incoming rule, or the destination IP or IPs for the outbound rule.
For example, supplying a list of known IP addresses for the standard
ssh(1) service will prevent tiresome exhaustive attempts to get
passwords.
Local users can access ssh(1) from unknown addresses using the knowledge
of a random port number given by another rule.
.SS blacklist and whitelist
.PP
Files in these directories make nftables rules permitting access in the
whitelist or blocking access in the blacklist.
Whitelisted rules appear before blacklisted ones in the firewall.
.PP
Filenames are simply IP addresses.
The whitelist or blacklist scanners will create files in these
directories, and will add a suffix of \f[I].auto\f[R].
Files added `by hand' should just be the IP address.
.PP
IPv6 addresses are added in /112 form, with the `/' replaced by a
vertical bar `|'.
Install IPv4 address groups with network masking using the same
convention.
.PP
Empty files mean that the rule applies to all ports.
File contents are lists, one per line, with the following contents:
.IP \[bu] 2
all - a `special' keyword meaning that the rule applies to all ports.
.IP \[bu] 2
a numeric port number
.PP
Firewall rules with `all' ports appear in the ruleset before any rules
containing specific ports.
.PP
The system has no way of distinguishing between TCP and UDP protocols
and the system generates two rules for each rule it finds.
.PP
Administrators can disable the blacklist and whitelist systems
separately by creating a file called `disabled' in the relevant
directory.
.PP
When building the firewall from these two directories, \f[B]nftfw\f[R]
writes the IP addresses into nftables sets.
The program writes the information into two separate files and uses file
comparison with the last loaded files to see If it can update the sets
of IP addresses without reloading the whole firewall.
.SS blacknets.d
.PP
Files in this directory make nftables rules in a single set that block
ranges of IP addresses.
Files not ending in \f[I].nets\f[R] are ignored.
.PP
Each file contains a list of IP network addresses, expressed in CIDR
notation, one to a line.
The file can also contain comments with the usual use of # to show them.
Lines can contain the following formats:
.RS
.PP
# IPv4 CIDR 203.0.113.0/24
.PP
# IPv6 Compressed 2001:DB8::/32
.PP
# IPv6 Exploded 2001:0db8:0000:0000:0000:0000:0000:0000/32
.PP
# IPv4 embedded in IPv6 (will be converted to IPv4) # Format used by
ip2location ::FFFF:203.0.113.0/120
.PP
# IPv4 embedded in IPv6 (will be converted to IPv4) ::ffff:cb00:7100/120
.RE
.PP
Theoretically, these are addresses of networks and not interfaces.
The parts of the address that are `local' should be zero.
For example in 203.0.113.5/24, the `24' means that the leftmost 24 bits
of the 32 bits are the network address and the 5 is the local part, that
should be zero.
However, \f[B]nftfw\f[R] will accept addresses where bits are set in
these supposedly zero sections and will clear them.
.PP
The system can deal with lists for the same country from different
sources, which will inevitably diverge.
The system will remove exact duplicates, and will minimise overlapping
address ranges where possible
.SS patterns.d
.PP
Patterns define rules for the \f[B]blacklist\f[R] module containing the
log file (or files) for scanning, the port numbers for the blocking
firewall rules, and a list of regular expressions matching lines in the
log file.
.PP
Pattern files are text files named \f[I]name.pattern\f[R].
The files support comments when the first character of the line contains
`#'.
.PP
The files contain two `equals' statements that should always be present:
.RS
.PP
file = filename ports = port specification
.RE
.PP
Filename is the full path to a logfile that the pattern will used to
scan.
The filename can also contain shell `glob' characters (\[cq]*`,'?\[cq]
and single character ranges) allowing for the rule set to match a range
of files.
The blacklist system will ignore the pattern file (and complain) if the
file (or files) that it nominates doesn\[cq]t exist.
.PP
The port specification is usually a comma separated list of port
numbers.
A firewall rule uses the port list to ban access to specific services on
the system.
The ports statement has three `special' values:
.IP \[bu] 2
`all' will ban access to all ports for any matching IP;
.IP \[bu] 2
`update' allows us to get feedback from the firewall.
The `update' value will not create any firewall rules, it will only
increment counts in the system\[cq]s sqlite3(1) database for any IP that
matches.
The option provides feedback from the firewall that log continued
attempts to access the machine from blocked IP addresses.
.IP \[bu] 2
`test' marks the file as a testing pattern file.
The normal scan from the blacklist system will ignore files with
\f[I]ports=test\f[R].
Using the \f[B]-p\f[R] \f[I]patternname\f[R] option with the blacklist
command will consider only files with \f[I]ports=test\f[R] and the
pattern file name without the \f[I].pattern\f[R] suffix must match
\f[I]patternname\f[R].
.PP
The remainder of the pattern file is a set of regular expressions,
placed one per line, that match offending lines in the log files.
The rules all contain the string \f[V]__IP__\f[R] (two underscores at
end) used to match and capture the IPv4 or IPv6 address from the line.
Non-empty lines that don\[cq]t contain \f[V]__IP__\f[R] are flagged as
errors.
.PP
The expressions support Python\[cq]s standard regular expression syntax
but must only have one matching `capturing group' which is the
\f[V]__IP__\f[R] expansion.
It is safe to use non-capturing expressions, for example to match
\f[I]word1\f[R] or \f[I]word2\f[R] in the line, use
\f[V](?:word1|word2)\f[R].
.PP
Lines are flagged in the logs and ignored if the compilation of the
regular expression fails, or if there is more than one matching group.
.PP
The \f[B]blacklist\f[R] action for \f[B]nftfw\f[R] uses the patterns to
scan log files for matching lines using case-independent matching by the
regex and finds IP addresses that it adds to an sqlite3(1) database.
IP addresses exhibiting activity levels over a threshold will cause the
script to add the IP address file to the blacklist directory (see
nftfw(1)).
.PP
Setting \f[I]ports=test\f[R] in a pattern file enables testing to see if
regular expressions pick up offending IP addresses.
Set up a pattern test file pointing to the file you want to scan, and
set \f[I]port=test\f[R], add the regular expression you wish to test.
Then running
.RS
.PP
sudo nftfw -x -p pattern-test blacklist
.RE
.PP
will use data from \f[I]pattern-test.pattern\f[R] and will scan the
named log file (or files).
The \f[I]-x\f[R] flag scans the log file from the beginning and will not
update the stored file position.
The command will print a table with any matching IP addresses, along
with a match count.
The command can be re-run if matches fail after adjusting the regular
expression in the pattern file.
.SS rule.d
.PP
The \f[I]rule.d\f[R] directory contains small shell scripts that
translate firewall actions named in the \f[I]incoming.d\f[R] and
\f[I]outgoing.d\f[R] directories into nftables command lines.
Default rules are also used for the whitelist and blacklist generation.
Note the coding and management of these files are different from
Symbiosis, but the same idea is there, a shell file allows easy
additions by users.
The files do not run any commands, they output \f[I]nftables\f[R]
statements to \f[I]nftfw\f[R] which stores them and passes the file into
the \f[I]nft\f[R] command.
.PP
Filenames have the format:
.RS
.PP
actionname.sh
.RE
.PP
\f[B]nftfw\f[R] runs the scripts though the shell and captures the
output text, appending it to an nftables command file.
The system calls each action file twice, once for IPv4 and again for
IPv6.
The processing script uses environment variables to pass parameters into
the shell.
The parameters are:
.RS
.PP
DIRECTION - incoming | outgoing PROTO - values ip|ip6 TABLE - usually
filter CHAIN - table to add the rule to PORTS - ports to use (can be
empty) COUNTER - set to counter or empty IPS - ip addresses (can be
empty, single, ranges, named sets, unnamed sets) LOGGER - logger
statement
.RE
.PP
The pattern script uses the DIRECTION parameter in both incoming and
outgoing contexts and must set directional keywords in \f[B]nft\f[R]
commands correctly.
For an incoming rule, an IP address (if present) will be a `source'
address.
For an outgoing rule, an IP address (if present) will be a `destination'
address.
.PP
A rule script will usually create a simpler version of the command when
called with no ports.
.SS \f[I]local.d\f[R]
.PP
The \f[I]local.d\f[R] is the place to add locally modified and created
rules.
The directory allows distributions to update \f[I]rule.d\f[R].
\f[I]local.d\f[R] is searched before \f[I]rule.d\f[R] when looking for
rules.
.SS \f[I]config.ini\f[R]
.PP
The \f[I]etc\f[R] directory contains the \f[I]config.ini\f[R] file for
\f[B]nftfw\f[R].
nftfw_config(5) contains a description of the lines in this file.
.SS \f[I]nftfw_init.nft\f[R]
.PP
The file \f[I]nftfw_init.nft\f[R] contains the template rule set for
nftables, it\[cq]s used to establish the firewall framework and finally
uses several include statements to pull in the files created by the
system.
\f[B]nftfw\f[R] copies the file into the build directory at the start of
the build process.
.PP
The file is user-editable, allowing the framework to be changed.
The basic setup assumes that it\[cq]s running on a system with a single
network connection attached to the internet.
See the example supplied in \f[I]nftfw_router_example\f[R] which
provides a router setup with WAN and LAN connections using \f[I]nat\f[R]
and \f[I]forward\f[R] tables.
.SS \f[I]etc_nftfw\f[R] directory or symlink
.PP
Finally, the \f[I]etc_nftfw\f[R] directory contains the starting point
for all control files, and some examples.
The directory allows distributions to update the standard control files
while not changing those in use on a running system.
\f[I]etc_nftfw\f[R] may be a symlink on some installations pointing to
the distribution files stored elsewhere.
.SS Files in \f[I]var/lib/nftfw\f[R]
.PP
The \f[I]lib/nftfw\f[R] directory provides working space for the system.
It contains three directories and several working files.
.IP \[bu] 2
\f[I]build.d\f[R] - The \f[I]build\f[R] directory provides an initial
build space for \f[B]nftfw\f[R], it creates a new file set in the
directory from the information available to it.
The \f[B]nft\f[R] checking function validates the newly installed files,
and the update process will stop for any errors.
.IP \[bu] 2
\f[I]install.d\f[R] - The \f[I]install\f[R] directory is the source for
the \f[B]nft\f[R] command to load the tested file set into the system.
On the next run, \f[B]nftfw\f[R] will compare the newly generated files
in \f[I]build\f[R] with that last used set in \f[I]install\f[R].
The comparison determines whether to run a complete or partial
reinstall, or perhaps whether there has been no change.
The intention is to only update blacklist and whitelist set information
if this is possible.
.IP \[bu] 2
\f[I]test.d\f[R] - \f[B]nftfw -x\f[R] runs the build process up to the
point of validating the files and will use this directory as a target
for the build.
.IP \[bu] 2
\f[I]firewall.db\f[R] - is an sqlite3(1) database used by the blacklist
command to store state on the IP\[cq]s it detects, when and why.
The nftfwls(1) command prints its contents.
.IP \[bu] 2
\f[I]filepos.db\f[R] - is an sqlite3(1) database used by the blacklist
command to store the last known position in the log files that it scans.
.IP \[bu] 2
\f[I]whitelist_scan\f[R] - is an empty file, the whitelist command sets
its modification date registering the last run time that the command was
run.
The command uses the time to skip over processed entries in the
\f[I]wmtp\f[R] file
.IP \[bu] 2
\f[I]sched.lock\f[R] - is a lock file used as master lock.
\f[B]nftfw\f[R] locks the file to prevent other instances from running.
If another instance of the command starts, it will fail to get the lock,
and the queues the intended action before exiting.
.IP \[bu] 2
\f[I]sched.queue\f[R] - stores queued actions.
The queuing system permits the storage of only one action of any one
type (load, blacklist, whitelist or tidy).
When the master lock owner finishes its task, it inspects the queue file
and performs the job without relinquishing the master lock.
On the last action, lock owner deletes the queue file.
.IP \[bu] 2
\f[I]queue.lock\f[R] - is a lock file controlling access to the queue
file.
.SH FILES
.PP
Files can be located under \f[I]/usr/local\f[R].
.TP
\f[I]/etc/nftfw\f[R]
Location of control files
.SH BUGS
.PP
See GitHub Issues:
\[ga]\[ga]<https://github.com/pcollinson/nftfw/issues>
.SH AUTHOR
.PP
Peter Collinson (huge credit to the ideas from Patrick Cherry\[cq]s work
for the firewall for the Symbiosis hosting system).
.SH SEE ALSO
.PP
\f[B]nft(1)\f[R], \f[B]nftfwls(1)\f[R], \f[B]nftfwedit(1)\f[R],
\f[B]nftnetchk(1)\f[R], \f[B]nftfwadm(1)\f[R], \f[B]nftfw-config(5)\f[R]
